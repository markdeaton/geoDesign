<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" gap="5" 
		 xmlns:supportClasses="com.esri.ags.skins.supportClasses.*"
		 height="100%" xmlns:Slider="components.Slider.*">
	<fx:Metadata>
		[DefaultProperty("itemData")]
		[Event(name="weightChanged", type="flash.events.Event")]
		[Event(name="reclassItemChanged", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.components.HSlider;
			import spark.events.TextOperationEvent;
			/** The name of the weighted overlay item or attribute **/
			[Bindable]
			public var title				: String;
			/** The ID of this raster within the mosaic dataset **/
			[Bindable]
			public var mosaicDatasetRasterId: int;
			/** The name of this raster for use in the image service function chain
			 *  e.g. InputRanges_Raster1, OutputValues_Raster1, etc. **/
			public var inputRangeParamName	: String;
			/** The name of this raster for use in the image service function chain
			 *  e.g. InputRanges_Raster1, OutputValues_Raster1, etc. **/
			public var outputValuesParamName: String;
			/** How long to wait (ms) after adjusting reclass slider before updating the analysis map **/
			[Bindable]
			public var delayAnalysisAfterReclassChanged	: uint = 1500;
			
			private var _itemData		: ArrayCollection;
			
			/** Unchecking the last checkbox auto-sets the item weight to 0. 
			 *  Use this variable to store the value when the last checkbox is
			 *  unselected; set to NaN when one or more checkboxes are subsequently
			 *  selected.
			 **/
			private var _oldWeight		: Number = NaN;
			
			[Bindable]
			public function get itemData():ArrayCollection
			{
				return _itemData;
			}

			/** An ArrayCollection of OverlayReclass objects defining the overlay items or attributes.
			  * Can be OverlayReclassDiscrete or OverlayReclassRange.
			  **/
			public function set itemData(value:ArrayCollection):void
			{
				_itemData = value;
			}
			
			[Bindable(event="weightChanged")]
			public function get weightPercent():uint {
				return trkWeightPercent.value;
			}
			public function set weightPercent(weight:uint):void {
				trkWeightPercent.value = weight;
			}

			public function get allItemsUnchecked():Boolean {
				var aryReclassItems:Array = itemData.source;
				return !aryReclassItems.some(
					function(o:OverlayReclass, i:int, a:Array):Boolean {
						return o.classEnabled;
					});
			}
			
			protected function trkWeightPercent_valueCommitHandler(event:FlexEvent):void {
				// Update the text box
				var nVal:Number = (event.currentTarget as HSlider).value;
				txtWeightPercent.text = nVal.toString();

				dispatchEvent(new Event("weightChanged", true));
			}
			
			protected function changeValue_txtWeightPercent(event:TextOperationEvent):void
			{
				// Update the slider
 				var ti:TextInput = event.currentTarget as TextInput;
				var nVal:uint = (ti.text == "") ? 0 : parseInt(ti.text, 10);
				if (nVal >= 0 && nVal <= 100)
					trkWeightPercent.value = nVal;
			}
			
			private function formatWeightPercent(value:Number):String {
				return value.toString() + "%";
			}
			
			public function checkbox_changeHandler(event:Event):void {
				// If all items are unchecked, then the weight is changed to zero; notify listeners
				if (allItemsUnchecked) {
					_oldWeight = trkWeightPercent.value;
					trkWeightPercent.value = 0;
					trkWeightPercent.enabled = false;
					// Don't need to dispatch the event here; the weight slider will do that
//					dispatchEvent(new Event("weightChanged", true));
				}
				// Otherwise, notify listeners of a standard change of reclass item
				else {
					if (!isNaN(_oldWeight)) {
						// Item just moved from no-checks to one-or-more checks; reinstate old weight
						trkWeightPercent.value = _oldWeight;
						_oldWeight = NaN;
					}
					trkWeightPercent.enabled = true;
				}
				dispatchEvent(new Event("reclassItemChanged", true));
			}
			
			/** Returns the input range portion of the value mapping in JSON format, suitable for
			 *  passing into an Image Service rendering rule
			 **/
			public function get inputRanges():Array {
				var aryRanges:Array = new Array();
				for each (var oReclass:OverlayReclass in _itemData.source) {
					if (oReclass.classEnabled) 
						aryRanges = aryRanges.concat(oReclass.inputClassRange);
				}
				return aryRanges;
			}
			
			/** Returns the output mapped values in JSON format, suitable for
			 *  passing into an Image Service rendering rule
			 **/
			public function get outputValues():Array {
				var aryValues:Array = new Array();
				for each (var oReclass:OverlayReclass in _itemData.source) {
					if (oReclass.classEnabled) aryValues.push(oReclass.reclassValue);
				}
				return aryValues;
			}
			
		]]>
	</fx:Script>
	
	
	<!-- Title area -->
	<s:HGroup width="100%" verticalAlign="middle">
		<s:Label text="{title}" fontWeight="bold"/>
		<s:VGroup gap="-3" horizontalAlign="contentJustify">
			<s:HGroup>
				<s:Label id="leftLabel" text="0" width="{rightLabel.width}" textAlign="left"/>
				<s:Label id="middleLabel" width="100%" text="50" textAlign="center"/>
				<s:Label id="rightLabel" text="100" textAlign="right"/>
			</s:HGroup>
			<Slider:HSlider_noMouseWheel id="trkWeightPercent"
					   minimum="0" maximum="100" stepSize="1" showDataTip="true" 
					   dataTipFormatFunction="formatWeightPercent"
					   liveDragging="false"
					   valueCommit="trkWeightPercent_valueCommitHandler(event)"/>
		</s:VGroup>
		<s:TextInput id="txtWeightPercent" width="50" 
					 softKeyboardType="number"
					 text="{trkWeightPercent.value}" typicalText="100" 
					 change="changeValue_txtWeightPercent(event)"
					 returnKeyLabel="done"
					 restrict="0-9"/>
		<s:Label text="%"/>
	</s:HGroup>
	
	<!-- Value map -->
	<s:List id="attributes" dataProvider="{itemData}" width="100%" height="100%" borderVisible="false" verticalScrollPolicy="auto">
		<s:itemRenderer>				
			<fx:Component>
				<s:ItemRenderer autoDrawBackground="false" 
								creationComplete="itemrenderer1_creationCompleteHandler(event)">
					<s:layout>
						<s:HorizontalLayout gap="8" paddingTop="3" paddingBottom="3" verticalAlign="middle"/>
					</s:layout>

					<s:HGroup horizontalAlign="left" width="100%">
						<s:Label text="{data.label}"/>
					</s:HGroup>
					
					<s:HGroup width="100%" verticalAlign="middle" horizontalAlign="right" gap="8">
						<s:CheckBox id="chkUseInReclass" selected="@{data.classEnabled}" symbolColor="Green"
									change="outerDocument.checkbox_changeHandler(event);"/>
						<Slider:HSlider_noMouseWheel id="trkReclassValue" minimum="1" maximum="9" stepSize="1" 
								   liveDragging="false"
								   value="@{data.reclassValue}"
								   width="100%"
								   dataTipFormatFunction="reclassSliderTipFormat"
								   enabled="{chkUseInReclass.selected}" 
								   />
					</s:HGroup>					
					<fx:Script>
						<![CDATA[
							import mx.events.FlexEvent;
							private var reclassValueChanged_eventDispatchTimer : Timer;
							
							private function reclassSliderTipFormat(value:Number):String {
								var sTip:String;
								if (value == 0)
									sTip = "N/A: won't be considered";
								else
									sTip = "Value: " + value;
								return sTip;
							}
							private function timedDispatchEvent_reclassValueChanged(event:Event):void {
								outerDocument.dispatchEvent(new Event('reclassItemChanged', true));
							}
							
							protected function itemrenderer1_creationCompleteHandler(event:FlexEvent):void
							{
								reclassValueChanged_eventDispatchTimer = new Timer(outerDocument.delayAnalysisAfterReclassChanged, 1);
								reclassValueChanged_eventDispatchTimer.addEventListener(TimerEvent.TIMER_COMPLETE, timedDispatchEvent_reclassValueChanged);
								trkReclassValue.removeEventListener(FlexEvent.VALUE_COMMIT, trkReclassValue_valueCommit);
								trkReclassValue.addEventListener(FlexEvent.VALUE_COMMIT, trkReclassValue_valueCommit);
							}
							private function trkReclassValue_valueCommit(event:FlexEvent):void {
								reclassValueChanged_eventDispatchTimer.reset(); 
								reclassValueChanged_eventDispatchTimer.start();
							}
						]]>
					</fx:Script>
				</s:ItemRenderer>							
			</fx:Component>
		</s:itemRenderer>
	</s:List>

	<s:HGroup verticalAlign="middle">
		
		<s:Button label="Unselect All" width="120">
			<s:click>
				<![CDATA[
				var btn:Button = Button(event.currentTarget);
				var bSelectStatus:Boolean = btn.label == "Select All";
				btn.label = (bSelectStatus) ? "Unselect All" : "Select All";
				for each (var oReclass:OverlayReclass in _itemData.source)
				oReclass.classEnabled = bSelectStatus;
				checkbox_changeHandler(event);
				]]>
			</s:click>	
		</s:Button>

		
	</s:HGroup>
	
</s:VGroup>
